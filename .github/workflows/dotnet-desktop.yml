name: .NET Core Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: EC2Manager.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: EC2Manager.UnitTests\EC2Manager.UnitTests.csproj               # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      Wap_Project_Directory: EC2Manager    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
      Wap_Project_Path: EC2Manager\EC2Manager.csproj                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    # Zip artifacts into release.zip
    - name: Zip artifacts into release.zip
      uses: Amadevus/pwsh-script@v2
      id: zip-script
      with:
        script: |
          Compress-Archive -Path D:\a\EC2Manager\EC2Manager\EC2Manager\bin\Release\net5.0-windows -DestinationPath D:\a\EC2Manager\EC2Manager\EC2Manager\bin\Release\net5.0-windows\release.zip
        
    - name: Create archive
      run: Compress-Archive -Path D:\a\EC2Manager\EC2Manager\EC2Manager\bin\Release\net5.0-windows\* -DestinationPath D:\a\EC2Manager\EC2Manager\EC2Manager\bin\Release\net5.0-windows\release_${{steps.getVersion.outputs.result}}.zip    
        
    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: RC ${{steps.getVersion.outputs.result}}
        draft: false
        prerelease: false

    - name: Update release asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: D:\a\EC2Manager\EC2Manager\EC2Manager\bin\Release\net5.0-windows\release_${{steps.getVersion.outputs.result}}.zip
        asset_name: release_${{steps.getVersion.outputs.result}}.zip
        asset_content_type: application/zip
